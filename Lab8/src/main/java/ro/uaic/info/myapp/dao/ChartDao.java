package ro.uaic.info.myapp.dao;

import java.sql.*;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;

public class ChartDao implements Dao<Chart> {

    @Override
    public Integer create(Chart chart) throws DbException {
        try {
            Connection conn = Database.getConnection();
            PreparedStatement stmt = conn.prepareStatement("INSERT INTO charts(name) VALUES(?)",
                    new String[]{"id"});
            stmt.setString(1, chart.getName());
            stmt.executeQuery();
            int chart_id;
            ResultSet autogeneratedId = stmt.getGeneratedKeys();
            if (autogeneratedId.next())
                chart_id = autogeneratedId.getInt(1);
            else
                throw new DbException("Error when creating chart: cannot get autogenerated id");

            try {
                autogeneratedId.close();
            } catch (Exception ignore) { }

            int rank = 1;
            for (Integer i : chart.getAlbumRank()) {
                stmt = conn.prepareStatement("INSERT INTO chart_data(album_id, rank, chart_id) VALUES(?,?,?)");
                stmt.setInt(1, i);
                stmt.setInt(2, rank++);
                stmt.setInt(3, chart_id);
                stmt.executeQuery();
            }
            return chart_id;
        } catch (SQLException e) {
            throw new DbException("Error when creating chart!", e);
        }
    }

    private LinkedList<Integer> getAlbumRank(int chartId) throws SQLException {
        LinkedList<Integer> albumRank = new LinkedList<>();
        PreparedStatement stmt = Database.getConnection()
                .prepareStatement("SELECT album_id FROM chart_data WHERE chart_id=? ORDER BY rank");
        stmt.setInt(1, chartId);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            albumRank.add(rs.getInt(1));
        }
        try {
            rs.close();
        } catch (Exception ignore) { }
        return albumRank;
    }

    @Override
    public Chart findById(int id) throws DbException {
        try {
            Connection conn = Database.getConnection();
            PreparedStatement stmt = conn.prepareStatement("SELECT * FROM charts WHERE id=?");
            stmt.setInt(1, id);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                String name = rs.getString("name");
                try {
                    rs.close();
                } catch (Exception ignore) { }
                LinkedList<Integer> albumRank = getAlbumRank(id);
                return new Chart(name, albumRank);
            }
            try {
                rs.close();
            } catch (Exception ignore) { }
            return null;
        } catch (SQLException e) {
            throw new DbException("Error trying to find chart by id!", e);
        }
    }

//    private Integer findIdByName(String name) throws SQLException {
//        Connection conn = Database.getConnection();
//        PreparedStatement stmt = conn.prepareStatement("SELECT id FROM charts WHERE name=?");
//        stmt.setString(1, name);
//        ResultSet rs = stmt.executeQuery();
//        if (rs.next())
//            return rs.getInt(1);
//        return null;
//    }

    public LinkedList<Chart> getAllCharts() throws DbException {
        try {
            LinkedList<Chart> charts = new LinkedList<>();
            Connection conn = Database.getConnection();
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT * FROM charts");
            List<Integer> ids = new LinkedList<>();
            while (rs.next()) {
                ids.add(rs.getInt("id"));
                charts.add(new Chart(rs.getString("name"), getAlbumRank(rs.getInt("id"))));
            }
            try {rs.close();} catch (Exception e) {
                System.out.println("--------------------------------");
                System.out.println(e.getMessage());
            }

            ListIterator<Chart> listIterator = charts.listIterator();
            for (Integer id : ids) {
                listIterator.next().setAlbumRank(getAlbumRank(id));
            }

            return charts;
        } catch (SQLException e) {
            throw new DbException("Error getting all charts", e);
        }
    }
}
